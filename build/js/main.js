function Popup(o){!function(){document.getElementById("contact_us").onclick=function(){e.classList.add("js_open"),t.classList.add("js_modal_content"),document.body.classList.add("js_hidden")}}(),function(){document.getElementById("close").onclick=function(){e.classList.remove("js_open"),t.classList.remove("js_modal_content"),document.body.classList.remove("js_hidden")}}();var e=document.getElementById(o),t=document.getElementById("modal_contents")}function ShowMoreElements(o,e){var t=document.getElementById(o),n=document.getElementById(e);t.onclick=function(){n.classList.add("js_show_more"),t.classList.add("none_display")}}function SmoothScroll(){function o(o,t){document.getElementById(o).onclick=function(){e(t)}}function e(o){var e=document.getElementById(o),n=e.offsetTop,l=t(),c=n>l?n-l:l-n;if(c<100)return void scrollTo(0,n);var s=Math.round(c/100);s>=20&&(s=20);var d=Math.round(c/40),u=n>l?l+d:l-d,i=0;if(n>l)for(var m=l;m<n;m+=d)setTimeout("window.scrollTo(0, "+u+")",i*s),u+=d,u>n&&(u=n),i++;else for(var r=l;r>n;r-=d)setTimeout("window.scrollTo(0, "+u+")",i*s),u-=d,u<n&&(u=n),i++}function t(){return self.pageYOffset?self.pageYOffset:document.documentElement&&document.documentElement.scrollTop?document.documentElement.scrollTop:document.body.scrollTop?document.body.scrollTop:0}o("about_us","about_us"),o("latest","latest"),o("get_touch","get_touch")}function RollUp(){function o(){return self.pageYOffset?self.pageYOffset:document.documentElement&&document.documentElement.scrollTop?document.documentElement.scrollTop:document.body.scrollTop?document.body.scrollTop:0}!function(){document.getElementById("roll_up").onclick=function(){var o=window.setInterval(function(){var e=window.pageYOffset;e<80&&e>0?window.scrollTo(0,e-150+140):e<100&&e>0?window.scrollTo(0,e-150+120):e<250&&e>0?window.scrollTo(0,e-150+80):e<350&&e>0?window.scrollTo(0,e-150+60):e<500&&e>0?window.scrollTo(0,e-150+40):e>0?window.scrollTo(0,e-150):window.clearInterval(o)},40)}}(),window.onscroll=function(){var e=document.getElementById("#hero"),t=e.offsetTop,n=o(),l=document.getElementById("roll_up");document.documentElement.clientWidth<=767?n>=t?l.classList.add("js_visible"):n<t&&l.classList.remove("js_visible"):n>=t+230?l.classList.add("js_visible"):n<t+730&&l.classList.remove("js_visible")}}window.onload=function(){ShowMoreElements("show","show_more"),Popup("my_modal"),SmoothScroll(),RollUp()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
